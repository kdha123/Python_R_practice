v1
# 벡터
v1 <- c(1,2,3,4,5)
v1
V1 <- c(1:10)
V1
v1 <- seq(1:10,3)
v1 <- seq(1,10,3)
v1
v1 <- c(1:10)
v1
f <- read.table(file = 'table.txt', sep = '\t')
f
f <- read.table(file = 'table.txt', sep = '\t', encoding = 'UTF-8')
union(v1,V1)
intersect(v1,V1)
setdiff(v1,V1)
# 벡터
v1 <- c(1,2,3,4,5)
union(v1,V1)
intersect(v1,V1)
setdiff(v1,V1)
sum(v1)
min(v1)
max(v1)
mean(v1
mean(v1)
mean(v1)
name <- c('홍길동', '코난', '엘사','크리스토퍼')
gender <- c('남','남','여','남')
age <- c(10,8,50,16)
# factor : 범주형 데이터, 지정된 값을 가짐
fgender <- as.factor(gender) # 범주형 변수
fgender
mode(fgender)
mode(d)
# 날짜데이터
d <- '2020-01-07'
mode(d)
as.Date(d)
# 날짜데이터
d <- '2020-01-07'
mode(d)
d1 <-as.Date(d)
d1
mode(d1)
sum(d1)
d1 <-as.Date(d,'%y/%m/%d')
d1
mode(d1)
d1 <-as.Date(d)
d1
mode(d1)
class(d1)
class(fgender)
d2 <- c('20-01-07','20-01-03')
d3 <- as.Date(d2)
d3
d3 <- as.Date(d2, '%y-%m-%d')
d3
d3 <- as.Date(d2, '%Y-%m-%d')
d3
#matrix --------------
m1 <- matrix(c(1:12))
m1
#matrix --------------
m1 <- matrix(c(1:12),2)
m1
#matrix --------------
m1 <- matrix(c(1:12),2,3)
m1
#matrix --------------
m1 <- matrix(c(1:12),2,6)
m1
#matrix --------------
m1 <- matrix(c(1:12),2,8)
m1
#matrix --------------
m1 <- matrix(c(1:12),2,byrow = T)
m1
m1[2:4,2]
#apply 함수적용
apply(m1,max)
#apply 함수적용
apply(m1, 1, max)
apply(m1, 2, min) # 열방향향
apply(m1, 2, mean)
# 사용자정의함수
f1<-function(x){
x+c(100,200,300,400,500)
}
apply(m1, 2, f1)
m1<- matrix(c(1:12), 5)
m1
# 사용자정의함수
f1<-function(x){
x+c(100,200,300,400,500)
}
apply(m1, 2, f1)
# Array--------------
# 동일한 데이터를 가지는 다차원배열
a1<- array(c(1:24),c(3,4,2))
a1
# list : 키와 값이 한쌍으로 저장
a1 <- list('홍길동','달리기',10)
a1
a2 <- list(c(1:5),c('one','two','three'),TRUE)
a2
a3 <- list(no = c(1:5),name = c('one','two','three'),etc = TRUE)
a3
a3$no
a3$name
a3$etc
a3$name[2]
a2[2,2]
#원소제거
a3$name <- NULL
a3
# 1)vector를 이용한 생성
no <- c(1:3)
name <- c("김","이","박")
pay <- c(200,210,220)
df1 <- data.frame(no,name,pay)
df1
mode(df1)
class(df1)
str(df1)
ncol(df1)
nrow(df1)
df1[2]
df
class(df1)
df1[2]
df1[c(2:3)]
summary(df1)
summary(c(1:9))
#subset(데이터프레임, 조건)조건에 맞는 데이터 추출
df2 <- subset(df1,pay>200)
df2
df2 <- subset(df1,pay<200 | pay>220)
df2
df2 <- subset(df1,pay<200 & pay>220)
df2
no <- c(1:3)
name <- c("김","이","박")
pay <- c(200,210,220)
df1 <- data.frame(no,name,pay)
df1
df2 <- subset(df1,pay>200)
df2
df2 <- subset(df1,pay<200 | pay>220)
df2
df2 <- subset(df1,pay<200 & pay>220)
df
df2 <- subset(df1,pay>200 & pay<220)
df2
#------연습하기------
df <- data.frame(제품=c('사과','딸기','수박'),가격=c(1800,1500,3000),판매량=c(24,38,13))
df
mean(df$가격)
mean(df$'가격')
mean(df$price)
#------연습하기------
df <- data.frame(name=c('사과','딸기','수박'),price=c(1800,1500,3000),sales=c(24,38,13))
df
mean(df$price)
mean(df$sales)
#------연습하기------
df <- data.frame(name=c('사과','딸기','수박'),price=c(1800,1500,3000),sales=c(24,38,13), pass=c(T,T,F))
df
summary(df)
View(df)
library(ggplot2)
library(ggplot2)
mpg
view(mpg)
View(mpg)
View(df)
View(df1)
View(df2)
mpg$manufacturer
summary(mpg)
# read.table()
# getwd()
f <- read.table('table.txt')
f
# read.table()
# getwd()
f <- read.table('table.txt')
f
f <- read.table('table1.txt')
f
f <- read.table('table1.txt', header = T)
f
f <- read.table('table1.txt', header = F)
f
f <- read.table('table1.txt', header = T)
f
class(f)
mode(f)
str(f)
f <- read.table('table1.txt', header = T, stringsAsFactors = F)
f
str(f)
f <- read.table('table2.txt', header = T, stringsAsFactors = F, sep = ",")
f
f <- read.table('table2.txt', header = T, stringsAsFactors = F)
f
f <- read.table('table2.txt', header = T, stringsAsFactors = F, sep = ",")
f
f <- read.table(file = clipboard)
f <- read.table(file = 'clipboard')
f <- read.table(file = 'clipboard')
f <- read.table(file = 'clipboard')
f <- read.table(file = 'clipboard')
f
f <- read.csv('table2.txt', header = T)
f
View(f)
f <- read.table(file.choose(),header = T)
f
f <- read.table(file.choose(),header = T)
f
f <- read.xlsx('s.xlsx')
f <- readLines('s.xlsx')
f
# 엑셀 파일을 위한 패키지를 설치해야함.
install.packages('xlsx')
library(xlsx)
f <- read.xlsx('s.xlsx')
f <- read.xlsx('s.xlsx',2)
f
f <- read.xlsx('s.xlsx',1)
f <- read.xlsx('s.xlsx',1, encoding = 'UTF-8')
f
f <- read.xlsx('s.xlsx',sheetIndex=1, encoding = 'UTF-8', header = T)
f
# 변수명 지정
names(f)<- c('번호','이름','나이')
f
View(f)
#write.table()
write.table()
#write.table()
data()
cars
write.table(cars,'cars1.txt')
write.table(cars,'cars2.txt',row.names = F,quote = F)
write.table(cars,'cars3.txt',row.names = F,quote = F, sep = ",")
write.csv(cars,'cars.csv')
write.csv(cars,'cars.csv',row.names = F,quote = F)
f <- read.xlsx('s.xlsx',sheetIndex=2, encoding = 'UTF-8', header = T)
f
write.xlsx(cars,'cars.xlsx')
write.xlsx(cars,'cars.xlsx',row.names = F,quote = F)
write.xlsx(cars,'cars.xlsx',row.names = F)
#---------------
a<-5
print(a)
a
b<-6
print(a,b)
print('a=',a)
cat('a=',a)
#--------------
fruit <- c('딸기','체리','샤인머스캣')
fruit
mode(fruit)
#is.xxxx(), as.xxxxx()
f1 <- as.factor(fruit)
f1
#----------------
v1 <- c(100,200,300)
mode(v1)
sum(v1)
summary(v1)
fruit <- c('딸기','체리','샤인머스캣')
fruit
mode(fruit
mode(fruit)
#is.xxxx(), as.xxxxx()
f1 <- as.factor(fruit)
f1
mode(fruit)
f1
sum(f1)
str(f1)
as.numeric(f1)
as.character(f1)
f2 <- as.factor(fruit, levels=c("샤인머스캣","딸기","체리"))
f2 <- as.factor(fruit, levels(c("샤인머스캣","딸기","체리")))
f2 <- factor(fruit, levels=c("샤인머스캣","딸기","체리"))
f2
#------------------
result <- c('수','우','미','양','가')
result
f1<- as.factor(result)
f1
f2 <- factor(result, ordered = T)
f2
f2 <- factor(result, ordered = T, levels = c('수','우','미','양','가') )
f2
f2 <- factor(result, ordered = T)
f2
f3 <- factor(result, ordered = T, levels = c('가','양','미','우','수'))
f3
#------------------
# 숫자데이터 factor로 지정하기
v1 <- c(100,90,80,100,80,80)
f1 <- as.factor(v1)
f1
f1 <- as.numeric(f1)
f1
f1 <- as.character(f1)
f1
as.numeric(f1)
as.character(f1)
f1
#------------------
# 숫자데이터 factor로 지정하기
v1 <- c(100,90,80,100,80,80)
f1 <- as.factor(v1)
f1
as.numeric(f1)
as.character(f1)
iris
str(iris)
head(iris)
tail(iris)
tail(iris,5)
head(iris,10)
iris[3,]
iris[3,5]
iris[c(3,5),2]
head(iris[,c('Petal.Length','Species')])
head(iris$Species)
head(iris$Petal.Length[c(3,5)])
iris$Petal.Length[c(3,5)]
summary(iris$Sepal.Length)
sum(iris$Sepal.Length)
mean(iris$Sepal.Length)
median(iris$Sepal.Length)
quantile(iris$Sepal.Length) # 4분위수
# subset(데이터프레임, 조건)
subset(iris,Sepal.width > 4 & Sepal.Length > 5)
# subset(데이터프레임, 조건)
subset(iris,Sepal.Width > 4 & Sepal.Length > 5)
subset(iris,Sepal.Width > 4 & Sepal.Length > 5, c('Sepal.Length','Sepal.Width','Species'))
iris$Sepal.Width > 4
iris$Sepal.Width > 4 & iris$Sepal.Length > 5
iris[3,]
iris[iris$Sepal.Width >4]
iris[iris$Sepal.Width >4,]
iris[iris$Sepal.Width >4,c(T,F,F,F,T)]
f <- read.xlsx('s.xlsx',sheetIndex=2, encoding = 'UTF-8', header = T)
f
f <- read.xlsx('s.xlsx',sheetIndex=1, encoding = 'UTF-8', header = T)
f
names(f) <- c('번호','이름','나이')
f
subset(f,키 >=165)
subset(f,나이 >=20)
subset(f,나이 >=10)
subset(f,나이 >=10, c('이름','나이'))
f[f$나이>=10,c(2,3)]
f[f$나이>=10,c('이름','나이')]
f$나이>=10
f[나이>=10,c('이름','나이')]
f[c(T,T,F),c(F,T,T)]
f[c(T,T,T),c(F,T,T)]
install.packages('sqldf')
library(sqldf)
longley
sqldf('select GNP.deflator, GNP, Unemployed from longley where GNP > 300')
sqldf('select "GNP.deflator", GNP, Unemployed from longley where GNP > 300')
#연도별 GNP의 합을 출력
sqldf('select sum(GNP) from longley group by Year')
#연도별 GNP의 합을 출력
sqldf('select Year,sum(GNP) from longley group by Year')
#---------
f
save(f,file = 'ex1.rda')
load("D:/study/r1/ex1.rda")
load('ex1.rda')
View(f)
f
dim(f)
mpg
library(ggplot2)
mpg
install.packages('dplyr')
library(dplyr)
f<- rename(f,age=나이)
f
f$total <- f$age + f$이름
f$total <- f$age + f$번호호
f$total <- f$age + f$번호
f$total <- f$age + f$번호
f
f$result <- ifelse(f$total >10,'good','nomal')
f
f$result <- ifelse(f$total >14,'good','nomal')
f
f$result2 <- ifelse(f$total >14, 'good',ifelse(f$total>12,'normal','bad'))
f
iris
iris %>% filter(Sepal.Length > 5)
iris %>% filter(Sepal.Length > 5 & Sepal.Width <4)
iris %>% filter(Sepal.Length > 5 & Sepal.Width <4) %>% select(Sepal.Length, Sepal.Width, Species)
iris2<-iris %>%
filter(Sepal.Length > 5 & Sepal.Width <4) %>%
select(Sepal.Length, Sepal.Width, Species)
iris2$total <- iris2$Sepal.Length+iris2$Sepal.Width
iris2$비고 <- '..'
iris2
iris2$비고 <- NULL
iris2
iris2[,c(2:4)] <- NULL
iris2
iris2<-iris %>%
filter(Sepal.Length > 5 & Sepal.Width <4) %>%
select(Sepal.Length, Sepal.Width, Species)
iris2$total <- iris2$Sepal.Length+iris2$Sepal.Width
iris2$비고 <- '..'
iris2$비고 <- NULL
iris2
iris2[,-3]
iris2
iris2[,-2] <- NULL
iris2
# 결측치
v1 <- c(1,2,NA,3)
v1
sum(v1)
sum(v1, na.rm = T) # NA과의 합은 유효하지 않다.
v2 <- c(1,2,NULL,3)
v2
sum(v2)
# 112p 혼자서해보기
mpg
# 112p 혼자서해보기
mpg1 <- mpg
mpg1
mpg1 <- rename(mpg1,cty = city,hwy = highway)
mpg1 <- rename(mpg1,cty = city)
mpg1 <- rename(mpg1,cty = 'city')
mpg1 <- rename(mpg1,city = cty, highway = hwy)
mpg1
# 변수의 요약
# 범주형 변수
g = c('남','여','여','남','여','여','여','남','남')
g <- factor(g)
g
table(g)
t
# table():빈도표생성
t<-table(g)
t
# 막대그래프
barplot(t)
pie(t)
pie(t, col = luby)
pie(t, col = blue)
pie(t, col = 'earth')
pie(t, col = 'luby')
pie(t, col = 'skyblue')
pie(t, col = 'deepskyblue')
#상대빈도
prop.table(t)
# 수치형 변수
score = c(60,78,83,74,100,80,90,85,70)
sort(score)
qplot(score)
sort(score, decreasing = T)
summary(score)
boxplot(score)
# 수치형 변수
score = c(60,78,83,74,100,80,90,85,70,-10,-20)
boxplot(score)
# 수치형 변수
score = c(60,78,83,74,100,80,90,85,70,-10,0)
boxplot(score)
# 수치형 변수
score = c(60,78,83,74,100,80,90,85,70,0)
boxplot(score)
# 수치형 변수
score = c(60,78,83,74,100,80,90,85,70,0,300)
boxplot(score)
hist(score)
mpg
str(mpg)
mpg$total = mpg$cty+mpg$hwy
head(mpg)
mpg$test <- ifelse(mpg$total>20,'pass','fail')
mpg
mpg$total = (mpg$cty+mpg$hwy)/20
head(mpg)
mpg$test <- ifelse(mpg$total>=20,'pass','fail')
mpg
table(mpg$test)
mpg$total = (mpg$cty+mpg$hwy)/2
head(mpg)
mpg$test <- ifelse(mpg$total>=20,'pass','fail')
table(mpg$test)
t <- table(mpg$test)
barplot(t)
qplot(mpg$test)
#---------------------
mpg$test2 <- ifelse(mpg$total>=30,'a',ifelse(mpg$total>=25,'b',ifelse(mpg$total>=20,'c','d')))
qplot(mpg$test2)
mpg
mpg
