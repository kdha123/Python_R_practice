mode(age)
mode(is1004)
is1004<-T
mode(is1004)
class(name)
class(age)
class(hobby)
class(is1004)
v1
# 벡터 : 1차원, 동일한 자료-------
v1 <- c(1,2,3,4)
v1
# 벡터 : 1차원, 동일한 자료-------
v1 <- c(1,2,3,4,5)
v1
v1 <- c(1:100)
v1
v2 <- c(1:100,2)
v2
v2 <- seq(1:100,2)
v2
v2 <- seq(1,100,3) # 시작, 종료, 증감
v2
v3 <- rep(1:5,3)
v3
v3 <- rep(1:5, each = 3) # 대상, 반복수수
v3
v1 <- c(1,5,11:20,100,201:205)
v1
list()
v2 <- c("지드래곤",'택연','아이린')
v2
v2 <- c("조이",'웬디','아이린','슬기')
v2
v3<-c(T,F,TRUE,FALSE)
v3
v4 <- c(1,5,11:20,100,201:205,"300")
v4
mode(v4)
class(v4)
sum(v4)
#is.xxxx(), as.xxxx()
is.numeric(v4)
is.character(v4)
is.logical(v3)
is.numeric(v1)
as.numeric(v4)
v9 <- as.numeric(v4)
v9
sum(v9)
v9<- as.numeric(v3)
v9
v9<- as.numeric(v2)
v9
v9<- as.character(v1)
v9
ls()
source('D:/study/r1/0106_R_start.R', encoding = 'UTF-8', echo=TRUE)
<-c(1:50)
v1
source('D:/study/r1/0106_R_start.R', encoding = 'UTF-8', echo=TRUE)
v1<-c(1:50)
v1
v1[9]
v1[9:13]
v1[10,20,30,40]
v1[10,1]
v1[1,10]
v1[c(10,20,30,40)]
v1[39]
v1[!39]
v1[c(1:38,40:50)]
v1[-39]
v1[-39,-45]
v1[c(-39,-45)]
v1<-c(1:10)
v1
m1<-matrix(v1)
m1
m1<-matrix(v1,'번호')
m1<-matrix(v1,3)
m1<-matrix(v1,2)
m1
m1<-matrix(v1,2)
m1
m1<-matrix(v1,nrow = 2, byrow = T)
m1
m2<-matrix(c(1:13),nrow = 3)
m2
m1<-c(5,40,50:52)
m2<-c(30,5,6:8)
m1
m2
m<-rbind(m1,m2)
m
m2<-c(30,5,6:7)
m<-rbind(m1,m2)
m2<-c(30,5,6:8)
m2
m<-rbind(m1,m2)
m
m<-cbind(m1,m2)
m
mode(m)
class(,)
class(m)
m3<-matrix(1:10,2)
m3
m3[1,3]
m3[3]
m3[,3]
m3[1,]
m3[1,c(3,4)]
m3[2,-8]
m3[2,c(-8)]
m3[2,-8]
m3[2,c(-8)]
m3[2,8]
m3[2,-4]
length(m3)
nrow(m3)
a1<-array(v1,c(3,2,2))
a1
mode(a1)
class(a1)
a1[3,2,1]
a1[,,1]
al[,,2]
al[,,2]
a1
al[,,2]
a1[,,2]
#List자료구조형
l1<-list('bae','아이린',30)
l1
li[1]
l1[1]
l2<-list(name=c('홍길동','심청'),age=c(20,22),home=c('서울','대전'))
l2
l2$name
l2$age
l2$home
a <- 1 #a에 1할당
a
b<-2
b
c<-3
c
d<-3.5
d
a+b
a+b+c
4/b
5*b
var1 <- c(1,2,5,7,8) # 숫자 5개로 구성된 변수 생성성
var1
var2 <- c(1:5)
var2
var3 <- seq(1,5)
var3
var4 <- seq(1,10,by=2)
var4
var5 <- seq(1,10, by = 3) # 1~10까지 3간격 연속 값으로 변수 생성성
var5
var1+2
var1+var2
# 문자로 된 변수 만들기
str1 <- 'a'
str1
str2 <- 'text'
str2
str3 <- 'Hello World!'
str3
str4 <- c('a','b','c')
str4
str5 <- c('hello', 'World','is','good')
str5
str1+2
# 숫자를 다루는 함수
x <- c(1,2,3)
x
mean(x)
max(x)
min(x) # 최소값값
min(x) # 최소값
str5
paste(str5,collapse = ",") # 쉼표를 구분자로 str5 단어들 하나로 합치기기
paste(str5,collapse = ",") # 쉼표를 구분자로 str5 단어들 하나로 합치기
x_mean <- mean(x)
x_meam
x_mean
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
x <- c('a','a','b','c')
qplot(x)
qplot(data = mpg, x = hwy)
qplot(data = mpg, x = hwy) # data에 mpg, x축에 hwy 변수 지정해 그래프 생성
# x축 cty
qplot(data = mpg, x=cty)
qplot(data = mpg, x=cty, y = hwy)
qplot(data = mpg, x=cty, y = hwy, geom = 'line')
qplot(data = mpg, x=cty, y = hwy, geom = 'boxplot')
qplot(data = mpg, x=cty, y = hwy, geom = 'boxplot', colour = drv)
install.packages("stirngr")
install.packages("stringr")
library(stringr)
remove.packages("stringr", lib="~/R/win-library/3.6")
str_extract(s,'[0-9]')
# 문자열추출 str_extract('문자열','정규식')
install.packages('stringr')
library(stringr)
s <- '김길동50둘리10희동이5'
str_extract(s,'[0-9]')
search()
str_extract_all(s,'[0-9]')
str_extract_all(s,'[0-9]{1,3}')
str_extract_all(s,'[가-힣]{1,5}')
str_extract_all(s,'[^0-9]{1,3}')
# 문자열위치
str_locate(s,'둘리')
str_length(s)
str_sub(s,4,str_length(s))
str_sub(s,4,str_length(s)-2)
s<-'Apple,Lemon'
str_to_lower(s)
str_to_upper(s)
str_replace(s,'e','이')
str_replace_all(s,'e','이')
help("str_replace_all")
str_c(s,'강가딘20')
person <- c('둘리10', '김길동50', '희동이3')
person
s2 <- paste(person,collapse = "-")
s2
str_split(s2,'-')
s2
# 데이터 입출력-------------
n <- scan()
n
c <- scan()
c <- scan("")
help("scan")
c <- scan(what = character())
c
# vector, matrix, array, dataframe
df <- data.frame()
edit(df)
df <- edit(df)
df
#read.table()
read.table(table.txt)
#read.table()
getwd(
)
# read.table()
# getwd()
f <- read.table('table.txt')
# read.table()
# getwd()
f <- read.table(file = 'table.txt', sep = "")
# read.table()
# getwd()
f <- read.table(file = 'table.txt', sep = '', header = FALSE)
# read.table()
# getwd()
f <- read.table(file = 'table.txt', sep = '', fileEncoding = 'UTF-8')
source('D:/study/r1/0107_part3.R', encoding = 'UTF-8', echo=TRUE)
# read.table()
# getwd()
f <- read.table(file = 'table.txt', sep = '', fileEncoding = 'UTF-8')
f
# read.table()
# getwd()
f <- read.table(file = 'table.txt', sep = '', fileEncoding = 'UTF-8', header = T)
f
# read.table()
# getwd()
f <- read.table(file = 'table.txt', sep = '', fileEncoding = 'UTF-8', header = F)
f
# read.table()
# getwd()
f <- read.table(file = 'table.txt', sep = '', fileEncoding = 'UTF-8', header = F)
f
# read.table()
# getwd()
f <- read.table(file = 'table.txt', sep = '', fileEncoding = 'UTF-8')
f
# read.table()
# getwd()
f <- readline(file = 'table.txt', sep = '', fileEncoding = 'UTF-8')
# read.table()
# getwd()
f <- readline(file = 'table.txt', sep = '')
# read.table()
# getwd()
help("read.table")
f <- read.table(file = 'table.txt', sep = ' ')
f <- read.table(file = 'table.txt', sep = '\t')
f
f <- read.table(file = 'table.txt', sep = '\t', header = F)
f
f <- read.table(file = 'table.txt', sep = ' ', header = TRUE)
f
f <- read.table(file = 'table.txt', sep = ' ', header = TRUE, encoding = 'UTF-8')
f
f <- read.table(file = 'table.txt', sep = ' ', header = FALSE, encoding = 'UTF-8')
f
f <- read.table(file = 'table.txt', sep = ' ', header = FALSE , encoding = 'UTF-8')
f
f <- read.table(file = 'table.txt', sep = ' ', header = TRUE , encoding = 'UTF-8')
f
f <- read.table(file = 'table.txt', sep = ' ', header = TRUE , encoding = 'UTF-8')
f
f <- read.table(file = 'table.txt', sep = ' ', header = FALSE , encoding = 'UTF-8')
f
f <- read.table(file = 'table.txt', sep = ' ', header = FALSE , encoding = 'UTF-8')
f
f <- read.table(file = 'table.txt', sep = ' ', header = TRUE , encoding = 'UTF-8')
f
f <- read.table(file = 'table.txt', sep = ' ', header = TRUE , encoding = 'UTF-8')
f
f <- read.table(file = 'table.txt', sep = ' ', header = F)
f
f <- read.table(file = 'table.txt', sep = ' ', header = F)
f
f <- read.csv(file = 'test.csv', sep = '', header = F)
f
f <- read.csv(file = 'test.csv', sep = ',', header = F)
f
v1
# 벡터
v1 <- c(1,2,3,4,5)
v1
V1 <- c(1:10)
V1
v1 <- seq(1:10,3)
v1 <- seq(1,10,3)
v1
v1 <- c(1:10)
v1
f <- read.table(file = 'table.txt', sep = '\t')
f
f <- read.table(file = 'table.txt', sep = '\t', encoding = 'UTF-8')
union(v1,V1)
intersect(v1,V1)
setdiff(v1,V1)
# 벡터
v1 <- c(1,2,3,4,5)
union(v1,V1)
intersect(v1,V1)
setdiff(v1,V1)
sum(v1)
min(v1)
max(v1)
mean(v1
mean(v1)
mean(v1)
name <- c('홍길동', '코난', '엘사','크리스토퍼')
gender <- c('남','남','여','남')
age <- c(10,8,50,16)
# factor : 범주형 데이터, 지정된 값을 가짐
fgender <- as.factor(gender) # 범주형 변수
fgender
mode(fgender)
mode(d)
# 날짜데이터
d <- '2020-01-07'
mode(d)
as.Date(d)
# 날짜데이터
d <- '2020-01-07'
mode(d)
d1 <-as.Date(d)
d1
mode(d1)
sum(d1)
d1 <-as.Date(d,'%y/%m/%d')
d1
mode(d1)
d1 <-as.Date(d)
d1
mode(d1)
class(d1)
class(fgender)
d2 <- c('20-01-07','20-01-03')
d3 <- as.Date(d2)
d3
d3 <- as.Date(d2, '%y-%m-%d')
d3
d3 <- as.Date(d2, '%Y-%m-%d')
d3
#matrix --------------
m1 <- matrix(c(1:12))
m1
#matrix --------------
m1 <- matrix(c(1:12),2)
m1
#matrix --------------
m1 <- matrix(c(1:12),2,3)
m1
#matrix --------------
m1 <- matrix(c(1:12),2,6)
m1
#matrix --------------
m1 <- matrix(c(1:12),2,8)
m1
#matrix --------------
m1 <- matrix(c(1:12),2,byrow = T)
m1
m1[2:4,2]
#apply 함수적용
apply(m1,max)
#apply 함수적용
apply(m1, 1, max)
apply(m1, 2, min) # 열방향향
apply(m1, 2, mean)
# 사용자정의함수
f1<-function(x){
x+c(100,200,300,400,500)
}
apply(m1, 2, f1)
m1<- matrix(c(1:12), 5)
m1
# 사용자정의함수
f1<-function(x){
x+c(100,200,300,400,500)
}
apply(m1, 2, f1)
# Array--------------
# 동일한 데이터를 가지는 다차원배열
a1<- array(c(1:24),c(3,4,2))
a1
# list : 키와 값이 한쌍으로 저장
a1 <- list('홍길동','달리기',10)
a1
a2 <- list(c(1:5),c('one','two','three'),TRUE)
a2
a3 <- list(no = c(1:5),name = c('one','two','three'),etc = TRUE)
a3
a3$no
a3$name
a3$etc
a3$name[2]
a2[2,2]
#원소제거
a3$name <- NULL
a3
# 1)vector를 이용한 생성
no <- c(1:3)
name <- c("김","이","박")
pay <- c(200,210,220)
df1 <- data.frame(no,name,pay)
df1
mode(df1)
class(df1)
str(df1)
ncol(df1)
nrow(df1)
df1[2]
df
class(df1)
df1[2]
df1[c(2:3)]
summary(df1)
summary(c(1:9))
#subset(데이터프레임, 조건)조건에 맞는 데이터 추출
df2 <- subset(df1,pay>200)
df2
df2 <- subset(df1,pay<200 | pay>220)
df2
df2 <- subset(df1,pay<200 & pay>220)
df2
no <- c(1:3)
name <- c("김","이","박")
pay <- c(200,210,220)
df1 <- data.frame(no,name,pay)
df1
df2 <- subset(df1,pay>200)
df2
df2 <- subset(df1,pay<200 | pay>220)
df2
df2 <- subset(df1,pay<200 & pay>220)
df
df2 <- subset(df1,pay>200 & pay<220)
df2
#------연습하기------
df <- data.frame(제품=c('사과','딸기','수박'),가격=c(1800,1500,3000),판매량=c(24,38,13))
df
mean(df$가격)
mean(df$'가격')
mean(df$price)
#------연습하기------
df <- data.frame(name=c('사과','딸기','수박'),price=c(1800,1500,3000),sales=c(24,38,13))
df
mean(df$price)
mean(df$sales)
#------연습하기------
df <- data.frame(name=c('사과','딸기','수박'),price=c(1800,1500,3000),sales=c(24,38,13), pass=c(T,T,F))
df
summary(df)
View(df)
library(ggplot2)
library(ggplot2)
mpg
view(mpg)
View(mpg)
View(df)
View(df1)
View(df2)
mpg$manufacturer
summary(mpg)
